[{"/Users/chiharakenta/Documents/programming/projects/projects-in-progress/club-manager/src/functions/blocks/inputClub.js":"1","/Users/chiharakenta/Documents/programming/projects/projects-in-progress/club-manager/src/functions/index.js":"2","/Users/chiharakenta/Documents/programming/projects/projects-in-progress/club-manager/src/functions/workflowStep/addClub.js":"3"},{"size":2021,"mtime":1609722121419,"results":"4","hashOfConfig":"5"},{"size":895,"mtime":1609722121420,"results":"6","hashOfConfig":"5"},{"size":2380,"mtime":1609749488822,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"12fvqd4",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"12","messages":"13","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"14"},"/Users/chiharakenta/Documents/programming/projects/projects-in-progress/club-manager/src/functions/blocks/inputClub.js",[],"/Users/chiharakenta/Documents/programming/projects/projects-in-progress/club-manager/src/functions/index.js",[],"/Users/chiharakenta/Documents/programming/projects/projects-in-progress/club-manager/src/functions/workflowStep/addClub.js",["15"],"/* eslint strict: [2, \"global\"] */\n\n\"use strict\";\n\nconst blocks = require(\"../blocks/inputClub.js\");\n\n// ステップをワークフローに追加する際に実行\nconst editStep = async ({ ack, step, configure }) => {\n  console.log({ step });\n\n  try {\n    await ack();\n    console.log(\"ワークフローステップと正常に通信できました\");\n  } catch (err) {\n    console.error({ err });\n  }\n\n  try {\n    await configure({ blocks });\n    console.log(\"ワークフローステップ用のモーダルを表示できました\");\n  } catch (err) {\n    console.error({ err });\n  }\n};\n\n// ワークフローステップモーダルから値が送信されると実行される\nconst saveStep = async ({ ack, view, update }) => {\n  try {\n    await ack();\n    console.log(\n      \"ワークフローステップからデータを送信する際に正常に通信できました\"\n    );\n  } catch (err) {\n    console.error({ err });\n  }\n\n  const { values } = view.state;\n  const { name } = values.task_name_input;\n  const { description } = values.task_description_input;\n  const { captain } = values.task_captain_input;\n  const { member1st } = values.task_member_1st_input;\n  const { member2nd } = values.task_member_2nd_input;\n\n  // 創部をする際にワークフローから送られてくるデータの内容を表現するオブジェクト\n  const inputs = {\n    name: { value: name.value },\n    description: { value: description.value },\n    captain: { value: captain.value },\n    member1st: { value: member1st.value },\n    member2nd: { value: member2nd.value },\n  };\n\n  try {\n    await update({ inputs });\n    console.log(\"ワークフローステップが正常に保存されました\");\n  } catch (err) {\n    console.error({ err });\n  }\n};\n\n// イベント受信した内容を元に色々な処理を記述(ワークフローから値が送信されたら実行される処理)\nconst excuteStep = async ({ step, complete, fail }) => {\n  // ワークフローから送られてきた部活動に関する情報\n  const { inputs } = step;\n\n  try {\n    await complete({ inputs });\n    console.log(inputs);\n  } catch (err) {\n    // ステップの実行が失敗した場合のエラーを表示\n    await fail({ error: { message: err } });\n  }\n};\n\nconst addClubStep = {\n  edit: editStep,\n  save: saveStep,\n  execute: excuteStep,\n};\n\nmodule.exports = addClubStep;\n",{"ruleId":"16","severity":2,"message":"17","line":3,"column":1,"nodeType":"18","messageId":"19","endLine":3,"endColumn":14,"fix":"20"},"strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"21","text":"22"},[36,49],""]